package org.solyton.solawi.bid.module.db.migrations

import org.evoleq.exposedx.migrations.Migration
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.Transaction
import org.jetbrains.exposed.sql.and
import org.solyton.solawi.bid.application.permission.Context
import org.solyton.solawi.bid.application.permission.Right
import org.solyton.solawi.bid.application.permission.Role
import org.solyton.solawi.bid.application.permission.Value
import org.solyton.solawi.bid.module.db.repository.grant
import org.solyton.solawi.bid.module.db.repository.of
import org.solyton.solawi.bid.module.db.schema.*

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Fri Apr 04 19:11:20 CEST 2025
 *
 * Description: Create Contexts:
 * 1. Application Organization Context
 */
class Migration1743786680319(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1743786680319

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        // Existing rights
        val create = RightEntity.find{ RightsTable.name eq Right.create.value }.first()
        val read = RightEntity.find { RightsTable.name eq Right.read.value }.first()
        val update = RightEntity.find { RightsTable.name eq Right.update.value }.first()
        val delete = RightEntity.find { RightsTable.name eq Right.delete.value }.first()


        val createOrganization = RightEntity.find { RightsTable.name eq Right.Organization.create.value }.first()
        val readOrganization = RightEntity.find { RightsTable.name eq Right.Organization.read.value }.first()
        val updateOrganization = RightEntity.find { RightsTable.name eq Right.Organization.update.value }.first()
        val deleteOrganization = RightEntity.find { RightsTable.name eq Right.Organization.delete.value }.first()

        // Existing Roles
        val owner = RoleEntity.find { RolesTable.name eq Role.owner.value }.first()
        val manager = RoleEntity.find { RolesTable.name eq Role.manager.value }.first()
        val user = RoleEntity.find { RolesTable.name eq Role.user.value }.first()
        val bidder = RoleEntity.find { RolesTable.name eq Role.bidder.value }.first()

        //Setup Application Context
        val applicationContext = ContextEntity.find { ContextsTable.name eq Context.Application.value }.first()
        val applicationOrganizationContext = ContextEntity.find {
            ContextsTable.name eq Value.ORGANIZATION and (ContextsTable.rootId eq applicationContext.id)
        }.first()


        // New rights
        val manageUsers = RightEntity.new {
            name = Right.Application.Users.manage.value
            description = Right.Application.Users.manage.description
        }

        // Permissions
        val readRoleRightContexts = RightEntity.new {
            name = Right.readRightRoleContexts.value
            description = Right.readRightRoleContexts.description
        }

        // Application Subscriptions
        val readAvailableApplications = RightEntity.new {
            name = Right.Application.Subscriptions.readAvailableApplications.value
            description = Right.Application.Subscriptions.readAvailableApplications.description
        }
        val subscribeApplications = RightEntity.new {
            name = Right.Application.Subscriptions.subscribeApplications.value
            description = Right.Application.Subscriptions.subscribeApplications.description
        }
        val unsubscribeApplications = RightEntity.new {
            name = Right.Application.Subscriptions.unsubscribeApplications.value
            description = Right.Application.Subscriptions.unsubscribeApplications.description
        }

        // Grant owner rights in context APPLICATION
        ////////////////////////////////////////
        // Already granted:
        // 1. Create organization
        // 2. Create general

        (owner of applicationContext).grant(
            // general
            read,
            update,
            delete,
            // organization
            readOrganization,
            updateOrganization,
            deleteOrganization,
            // users
            manageUsers,
            // permissions
            readRoleRightContexts
        )

        // Grant manager Rights in context APPLICATION
        (manager of applicationContext).grant(
            // organization
            createOrganization,
            readOrganization,
            updateOrganization,
            deleteOrganization,
            // users
            manageUsers
        )

        // Grant user rights in context Application
        // create organization already granted

        // Grant Owner rights in context APPLICATION/ORGANIZATION
        (owner of applicationOrganizationContext).grant(
            // general
            create,
            read,
            update,
            delete,
            // organization
            createOrganization,
            readOrganization,
            updateOrganization,
            deleteOrganization,
            // users
            manageUsers
        )

        // Grant manager Rights in context APPLICATION/ORGANIZATION
        (manager of applicationOrganizationContext).grant(
            // organization
            createOrganization,
            readOrganization,
            updateOrganization,
            deleteOrganization,
            // users
            manageUsers
        )

        // Grant user Rights in context APPLICATION/ORGANIZATION
        (user of applicationOrganizationContext).grant(
            // organization
            createOrganization,
            readOrganization,
            updateOrganization,
            deleteOrganization,
            // users
            manageUsers,
            // application subscriptions
            readAvailableApplications,
            subscribeApplications,
            unsubscribeApplications
        )

        //val applicationOwner = UserEntity.find {  }
        //val applicationOrganization = createRootOrganization("APPLICATION", )

        // Setup Organization Context / Default Contexts
        val organizationContext = ContextEntity.find {
            ContextsTable.name eq Context.Organization.value and (ContextsTable.rootId eq null)
        }.first()
        // val applicationManagementContext =
        ContextEntity.find {
            ContextsTable.name eq Value.MANAGEMENT and (ContextsTable.rootId eq organizationContext.id)
        }.first()


        // Setup Auction Context
        val auctionContext = ContextEntity.find { ContextsTable.name eq Context.Application.value }.first()
        // val auctionOrganizationContext =
        ContextEntity.find {
            ContextsTable.name eq Value.ORGANIZATION and (ContextsTable.rootId eq auctionContext.id)
        }.first()

    }

    /**
     * Downwards migration (inverse to the upward migration).
     * These migrations are not taken into account by now!
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}
