name: Initial Version Bump

on:
  workflow_dispatch:
    inputs:
      new_version:
        description: "Enter new version (format: x.y.z)"
        required: true
        type: string

jobs:
  validate-and-bump-version:
    runs-on: ubuntu-latest
    steps:

      # Step 1: Ensure the workflow runs only on "develop" branch
      - name: Validate branch
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/develop" ]]; then
            echo "‚ùå This workflow can only be run on the 'develop' branch!"
            exit 1
          fi

      # Step 2: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 3: Validate if the new version is greater than existing ones
      - name: Validate version
        id: version_check
        run: |
          NEW_VERSION="${{ inputs.new_version }}"
          
          # Fetch all tags
          git fetch --tags
          
          # Get latest existing version tag
          LATEST_TAG=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+\.0$' | sort -V | tail -n 1)

          echo "üîπ Latest existing tag: $LATEST_TAG"
          
          # Strip "v" prefix from latest tag for comparison
          LATEST_VERSION=${LATEST_TAG:1}

          if [[ -z "$LATEST_VERSION" ]]; then
            echo "‚úÖ No existing versions found, proceeding with $NEW_VERSION."
          elif printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -V | tail -n 1 | grep -q "^$NEW_VERSION$"; then
            echo "‚úÖ New version $NEW_VERSION is greater than latest $LATEST_VERSION. Proceeding..."
          else
            echo "‚ùå New version $NEW_VERSION is NOT greater than latest $LATEST_VERSION!"
            exit 1
          fi

      # Step 4: Update the `versions.toml` file
      - name: Update versions.toml
        run: |
          # Replace the version in versions.toml
          sed -i 's/solawi = ".*"/solawi = "'"${{ inputs.new_version }}"'"/' gradle/libs.versions.toml
      
          echo "‚úÖ libs.versions.toml updated with version ${{ inputs.new_version }}"

      # Step 5: Commit the updated version file
      - name: Commit changes
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add gradle/libs.versions.toml
          git commit -m "üîñ Bump version to ${{ inputs.new_version }}"
          git push origin develop

      # Step 6: Create a new tag in the format "vx.y.z.0"
      - name: Create and push new tag
        run: |
          STABLE_VERSION="v${{ inputs.new_version }}"
          NEW_TAG="$STABLE_VERSION.0"
          git tag -a "$NEW_TAG" -m "First dev version of $STABLE_VERSION"

          git push origin "$NEW_TAG"
          
          echo "‚úÖ Created and pushed tag: $NEW_TAG"
