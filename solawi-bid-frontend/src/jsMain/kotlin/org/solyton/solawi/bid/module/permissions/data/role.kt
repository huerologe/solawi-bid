// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.permissions.data

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Role(
    @ReadWrite val roleId: String = "",
    @ReadWrite val roleName: String = "",
    @ReadWrite val roleDescription: String = "",
    @ReadWrite val rights: List<Right> = listOf()
)

/**
 * Autogenerated Lens.
 * Read and manipulate [Role.roleId]
 */
@ReadWrite val roleId: Lens<Role, String> by lazy{ Lens(
    get = {whole -> whole.roleId},
    set = {part -> {whole -> whole.copy(roleId = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Role.roleId]
 */
@ReadWrite fun Role.roleId(set: String.()->String ): Role = copy(roleId = set(roleId)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Role.roleName]
 */
@ReadWrite val roleName: Lens<Role, String> by lazy{ Lens(
    get = {whole -> whole.roleName},
    set = {part -> {whole -> whole.copy(roleName = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Role.roleName]
 */
@ReadWrite fun Role.roleName(set: String.()->String ): Role = copy(roleName = set(roleName)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Role.roleDescription]
 */
@ReadWrite val roleDescription: Lens<Role, String> by lazy{ Lens(
    get = {whole -> whole.roleDescription},
    set = {part -> {whole -> whole.copy(roleDescription = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Role.roleDescription]
 */
@ReadWrite fun Role.roleDescription(set: String.()->String ): Role = copy(roleDescription = set(roleDescription)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Role.rights]
 */
@ReadWrite val rights: Lens<Role, List<Right>> by lazy{ Lens(
    get = {whole -> whole.rights},
    set = {part -> {whole -> whole.copy(rights = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Role.rights]
 */
@ReadWrite fun Role.rights(set: List<Right>.()->List<Right> ): Role = copy(rights = set(rights)) 
