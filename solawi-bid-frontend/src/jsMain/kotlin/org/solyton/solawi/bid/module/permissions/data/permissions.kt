// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.permissions.data

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Permissions(
    @ReadWrite val userId: String = "",
    @ReadWrite val contexts: List<Context> = listOf()
)

/**
 * Autogenerated Lens.
 * Read and manipulate [Permissions.userId]
 */
@ReadWrite val userId: Lens<Permissions, String> by lazy{ Lens(
    get = {whole -> whole.userId},
    set = {part -> {whole -> whole.copy(userId = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Permissions.userId]
 */
@ReadWrite fun Permissions.userId(set: String.()->String ): Permissions = copy(userId = set(userId)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Permissions.contexts]
 */
@ReadWrite val contexts: Lens<Permissions, List<Context>> by lazy{ Lens(
    get = {whole -> whole.contexts},
    set = {part -> {whole -> whole.copy(contexts = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Permissions.contexts]
 */
@ReadWrite fun Permissions.contexts(set: List<Context>.()->List<Context> ): Permissions = copy(contexts = set(contexts)) 
