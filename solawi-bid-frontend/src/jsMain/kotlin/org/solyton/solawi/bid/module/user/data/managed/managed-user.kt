// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.user.data.managed

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens
import org.solyton.solawi.bid.module.permissions.data.Permissions

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class ManagedUser(
    @ReadWrite val id: String,
    @ReadWrite val username: String,
    @ReadWrite val password: String,
    @ReadWrite val permissions: Permissions,
)

/**
 * Autogenerated Lens.
 * Read and manipulate [ManagedUser.id]
 */
@ReadWrite val id: Lens<ManagedUser, String> by lazy{ Lens(
    get = {whole -> whole.id},
    set = {part -> {whole -> whole.copy(id = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [ManagedUser.id]
 */
@ReadWrite fun ManagedUser.id(set: String.()->String ): ManagedUser = copy(id = set(id)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [ManagedUser.username]
 */
@ReadWrite val username: Lens<ManagedUser, String> by lazy{ Lens(
    get = {whole -> whole.username},
    set = {part -> {whole -> whole.copy(username = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [ManagedUser.username]
 */
@ReadWrite fun ManagedUser.username(set: String.()->String ): ManagedUser = copy(username = set(username)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [ManagedUser.password]
 */
@ReadWrite val password: Lens<ManagedUser, String> by lazy{ Lens(
    get = {whole -> whole.password},
    set = {part -> {whole -> whole.copy(password = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [ManagedUser.password]
 */
@ReadWrite fun ManagedUser.password(set: String.()->String ): ManagedUser = copy(password = set(password)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [ManagedUser.permissions]
 */
@ReadWrite val permissions: Lens<ManagedUser, Permissions> by lazy{ Lens(
    get = {whole -> whole.permissions},
    set = {part -> {whole -> whole.copy(permissions = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [ManagedUser.permissions]
 */
@ReadWrite fun ManagedUser.permissions(set: Permissions.()->Permissions ): ManagedUser = copy(permissions = set(permissions)) 
