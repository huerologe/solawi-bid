// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.application.data

import kotlinx.coroutines.flow.MutableSharedFlow
import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadOnly
import org.evoleq.optics.ReadWrite
import org.evoleq.compose.modal.Modals
import org.evoleq.ktorx.api.Api
import org.evoleq.optics.lens.Lens
import org.evoleq.optics.storage.MutableSharedFlowActionDispatcher
import org.solyton.solawi.bid.application.api.solawiApi
import org.solyton.solawi.bid.application.data.device.Device
import org.solyton.solawi.bid.application.data.env.Environment
import org.solyton.solawi.bid.module.bid.data.Auction
import org.solyton.solawi.bid.module.bid.data.BidRound
import org.solyton.solawi.bid.module.context.data.Context
import org.solyton.solawi.bid.module.cookie.data.CookieDisclaimer
import org.solyton.solawi.bid.module.i18n.data.I18N
import org.solyton.solawi.bid.module.permissions.data.Permissions
import org.solyton.solawi.bid.module.user.data.User
import org.solyton.solawi.bid.module.bid.data.bidder.BidderMails
import org.solyton.solawi.bid.module.user.data.managed.ManagedUser

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Application (
    @ReadOnly val environment: Environment,
    @ReadOnly val api: Api = solawiApi,
    @ReadOnly val actions: MutableSharedFlowActionDispatcher<Application> = MutableSharedFlowActionDispatcher(MutableSharedFlow()),
    @ReadWrite val deviceData: Device = Device(),
    @ReadWrite val modals: Modals<Int> = mapOf(),
    @ReadWrite val i18N: I18N = I18N(),
    @ReadWrite val context: Context = Context(),
    @ReadWrite val userData: User = User(),
    @ReadWrite val cookieDisclaimer: CookieDisclaimer = CookieDisclaimer(),
    @ReadWrite val auctions: List<Auction> = listOf(),
    @ReadWrite val bidRounds: List<BidRound> = listOf(),
    @ReadWrite val bidderMailAddresses:  BidderMails = BidderMails(),
    @ReadWrite val managedUsers: List<ManagedUser> = listOf(),
    @ReadWrite val availablePermissions: Permissions = Permissions(),
)

/**
 * Autogenerated ReadOnly Lens.
 * Read [Application.environment]
 */
@ReadOnly val environment: Lens<Application, Environment> by lazy{ Lens(
    get = {whole -> whole.environment},
    set = {{it}}
) }
/**
 * Autogenerated ReadOnly Lens.
 * Read [Application.api]
 */
@ReadOnly val api: Lens<Application, Api> by lazy{ Lens(
    get = {whole -> whole.api},
    set = {{it}}
) }
/**
 * Autogenerated ReadOnly Lens.
 * Read [Application.actions]
 */
@ReadOnly val actions: Lens<Application, MutableSharedFlowActionDispatcher<Application>> by lazy{ Lens(
    get = {whole -> whole.actions},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.deviceData]
 */
@ReadWrite val deviceData: Lens<Application, Device> by lazy{ Lens(
    get = {whole -> whole.deviceData},
    set = {part -> {whole -> whole.copy(deviceData = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.deviceData]
 */
@ReadWrite fun Application.deviceData(set: Device.()->Device ): Application = copy(deviceData = set(deviceData)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.modals]
 */
@ReadWrite val modals: Lens<Application, Modals<Int>> by lazy{ Lens(
    get = {whole -> whole.modals},
    set = {part -> {whole -> whole.copy(modals = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.modals]
 */
@ReadWrite fun Application.modals(set: Modals<Int>.()->Modals<Int> ): Application = copy(modals = set(modals)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.i18N]
 */
@ReadWrite val i18N: Lens<Application, I18N> by lazy{ Lens(
    get = {whole -> whole.i18N},
    set = {part -> {whole -> whole.copy(i18N = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.i18N]
 */
@ReadWrite fun Application.i18N(set: I18N.()->I18N ): Application = copy(i18N = set(i18N)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.context]
 */
@ReadWrite val context: Lens<Application, Context> by lazy{ Lens(
    get = {whole -> whole.context},
    set = {part -> {whole -> whole.copy(context = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.context]
 */
@ReadWrite fun Application.context(set: Context.()->Context ): Application = copy(context = set(context)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.userData]
 */
@ReadWrite val userData: Lens<Application, User> by lazy{ Lens(
    get = {whole -> whole.userData},
    set = {part -> {whole -> whole.copy(userData = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.userData]
 */
@ReadWrite fun Application.userData(set: User.()->User ): Application = copy(userData = set(userData)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.cookieDisclaimer]
 */
@ReadWrite val cookieDisclaimer: Lens<Application, CookieDisclaimer> by lazy{ Lens(
    get = {whole -> whole.cookieDisclaimer},
    set = {part -> {whole -> whole.copy(cookieDisclaimer = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.cookieDisclaimer]
 */
@ReadWrite fun Application.cookieDisclaimer(set: CookieDisclaimer.()->CookieDisclaimer ): Application = copy(cookieDisclaimer = set(cookieDisclaimer)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.auctions]
 */
@ReadWrite val auctions: Lens<Application, List<Auction>> by lazy{ Lens(
    get = {whole -> whole.auctions},
    set = {part -> {whole -> whole.copy(auctions = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.auctions]
 */
@ReadWrite fun Application.auctions(set: List<Auction>.()->List<Auction> ): Application = copy(auctions = set(auctions)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.bidRounds]
 */
@ReadWrite val bidRounds: Lens<Application, List<BidRound>> by lazy{ Lens(
    get = {whole -> whole.bidRounds},
    set = {part -> {whole -> whole.copy(bidRounds = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.bidRounds]
 */
@ReadWrite fun Application.bidRounds(set: List<BidRound>.()->List<BidRound> ): Application = copy(bidRounds = set(bidRounds)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.bidderMailAddresses]
 */
@ReadWrite val bidderMailAddresses: Lens<Application, BidderMails> by lazy{ Lens(
    get = {whole -> whole.bidderMailAddresses},
    set = {part -> {whole -> whole.copy(bidderMailAddresses = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.bidderMailAddresses]
 */
@ReadWrite fun Application.bidderMailAddresses(set: BidderMails.()->BidderMails ): Application = copy(bidderMailAddresses = set(bidderMailAddresses)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.managedUsers]
 */
@ReadWrite val managedUsers: Lens<Application, List<ManagedUser>> by lazy{ Lens(
    get = {whole -> whole.managedUsers},
    set = {part -> {whole -> whole.copy(managedUsers = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.managedUsers]
 */
@ReadWrite fun Application.managedUsers(set: List<ManagedUser>.()->List<ManagedUser> ): Application = copy(managedUsers = set(managedUsers)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.availablePermissions]
 */
@ReadWrite val availablePermissions: Lens<Application, Permissions> by lazy{ Lens(
    get = {whole -> whole.availablePermissions},
    set = {part -> {whole -> whole.copy(availablePermissions = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.availablePermissions]
 */
@ReadWrite fun Application.availablePermissions(set: Permissions.()->Permissions ): Application = copy(availablePermissions = set(availablePermissions)) 
