// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.permissions.data

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Right(
    @ReadWrite val rightId: String = "",
    @ReadWrite val rightName: String,
    @ReadWrite val rightDescription: String,
)

/**
 * Autogenerated Lens.
 * Read and manipulate [Right.rightId]
 */
@ReadWrite val rightId: Lens<Right, String> by lazy{ Lens(
    get = {whole -> whole.rightId},
    set = {part -> {whole -> whole.copy(rightId = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Right.rightId]
 */
@ReadWrite fun Right.rightId(set: String.()->String ): Right = copy(rightId = set(rightId)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Right.rightName]
 */
@ReadWrite val rightName: Lens<Right, String> by lazy{ Lens(
    get = {whole -> whole.rightName},
    set = {part -> {whole -> whole.copy(rightName = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Right.rightName]
 */
@ReadWrite fun Right.rightName(set: String.()->String ): Right = copy(rightName = set(rightName)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Right.rightDescription]
 */
@ReadWrite val rightDescription: Lens<Right, String> by lazy{ Lens(
    get = {whole -> whole.rightDescription},
    set = {part -> {whole -> whole.copy(rightDescription = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Right.rightDescription]
 */
@ReadWrite fun Right.rightDescription(set: String.()->String ): Right = copy(rightDescription = set(rightDescription)) 
