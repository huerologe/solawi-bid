// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.user.data

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadOnly
import org.evoleq.optics.ReadWrite
import org.evoleq.compose.modal.Modals
import org.evoleq.optics.lens.Lens
import org.evoleq.optics.storage.ActionDispatcher
import org.solyton.solawi.bid.application.data.device.Device
import org.solyton.solawi.bid.module.i18n.data.Environment
import org.solyton.solawi.bid.module.i18n.data.I18N
import org.solyton.solawi.bid.module.i18n.data.I18nResources
import org.solyton.solawi.bid.module.permissions.data.Permissions
import org.solyton.solawi.bid.module.user.data.managed.ManagedUser

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Application(
    @ReadOnly val actions: ActionDispatcher<Application> = ActionDispatcher {  },
    @ReadWrite val deviceData: Device,
    @ReadWrite val modals: Modals<Int>,
    @ReadWrite val i18n: I18N,
    @ReadOnly val environment: Environment,
    @ReadWrite val user: User,
    @ReadWrite val managedUsers: List<ManagedUser> = listOf(),
    @ReadOnly val availablePermissions: Permissions = Permissions()
)

/**
 * Autogenerated ReadOnly Lens.
 * Read [Application.actions]
 */
@ReadOnly val actions: Lens<Application, ActionDispatcher<Application>> by lazy{ Lens(
    get = {whole -> whole.actions},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.deviceData]
 */
@ReadWrite val deviceData: Lens<Application, Device> by lazy{ Lens(
    get = {whole -> whole.deviceData},
    set = {part -> {whole -> whole.copy(deviceData = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.deviceData]
 */
@ReadWrite fun Application.deviceData(set: Device.()->Device ): Application = copy(deviceData = set(deviceData)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.modals]
 */
@ReadWrite val modals: Lens<Application, Modals<Int>> by lazy{ Lens(
    get = {whole -> whole.modals},
    set = {part -> {whole -> whole.copy(modals = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.modals]
 */
@ReadWrite fun Application.modals(set: Modals<Int>.()->Modals<Int> ): Application = copy(modals = set(modals)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.i18n]
 */
@ReadWrite val i18n: Lens<Application, I18N> by lazy{ Lens(
    get = {whole -> whole.i18n},
    set = {part -> {whole -> whole.copy(i18n = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.i18n]
 */
@ReadWrite fun Application.i18n(set: I18N.()->I18N ): Application = copy(i18n = set(i18n)) 
/**
 * Autogenerated ReadOnly Lens.
 * Read [Application.environment]
 */
@ReadOnly val environment: Lens<Application, Environment> by lazy{ Lens(
    get = {whole -> whole.environment},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.user]
 */
@ReadWrite val user: Lens<Application, User> by lazy{ Lens(
    get = {whole -> whole.user},
    set = {part -> {whole -> whole.copy(user = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.user]
 */
@ReadWrite fun Application.user(set: User.()->User ): Application = copy(user = set(user)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.managedUsers]
 */
@ReadWrite val managedUsers: Lens<Application, List<ManagedUser>> by lazy{ Lens(
    get = {whole -> whole.managedUsers},
    set = {part -> {whole -> whole.copy(managedUsers = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.managedUsers]
 */
@ReadWrite fun Application.managedUsers(set: List<ManagedUser>.()->List<ManagedUser> ): Application = copy(managedUsers = set(managedUsers)) 
/**
 * Autogenerated ReadOnly Lens.
 * Read [Application.availablePermissions]
 */
@ReadOnly val availablePermissions: Lens<Application, Permissions> by lazy{ Lens(
    get = {whole -> whole.availablePermissions},
    set = {{it}}
) }
