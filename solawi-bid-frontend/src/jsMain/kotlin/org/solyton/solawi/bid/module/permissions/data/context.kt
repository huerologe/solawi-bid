// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.permissions.data

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Context(
    @ReadWrite val contextId: String = "",
    @ReadWrite val contextName: String = "",
    @ReadWrite val roles: List<Role> = listOf(),
    @ReadWrite val children: List<Context> = listOf()
)

/**
 * Autogenerated Lens.
 * Read and manipulate [Context.contextId]
 */
@ReadWrite val contextId: Lens<Context, String> by lazy{ Lens(
    get = {whole -> whole.contextId},
    set = {part -> {whole -> whole.copy(contextId = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Context.contextId]
 */
@ReadWrite fun Context.contextId(set: String.()->String ): Context = copy(contextId = set(contextId)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Context.contextName]
 */
@ReadWrite val contextName: Lens<Context, String> by lazy{ Lens(
    get = {whole -> whole.contextName},
    set = {part -> {whole -> whole.copy(contextName = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Context.contextName]
 */
@ReadWrite fun Context.contextName(set: String.()->String ): Context = copy(contextName = set(contextName)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Context.roles]
 */
@ReadWrite val roles: Lens<Context, List<Role>> by lazy{ Lens(
    get = {whole -> whole.roles},
    set = {part -> {whole -> whole.copy(roles = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Context.roles]
 */
@ReadWrite fun Context.roles(set: List<Role>.()->List<Role> ): Context = copy(roles = set(roles)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Context.children]
 */
@ReadWrite val children: Lens<Context, List<Context>> by lazy{ Lens(
    get = {whole -> whole.children},
    set = {part -> {whole -> whole.copy(children = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Context.children]
 */
@ReadWrite fun Context.children(set: List<Context>.()->List<Context> ): Context = copy(children = set(children)) 
